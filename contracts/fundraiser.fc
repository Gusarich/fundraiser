#include "imports/stdlib.fc";
#include "constants.fc";

global slice data::admin;
global int data::goal;
global cell data::current;
global int data::block_time;
global slice data::priority_coin;
global cell data::metadata_ipfs_link;
global slice data::fee_receiver;
global int data::fee_percentage;
global cell data::helper_code;

global int context::op;
global int context::query_id;
global slice context::sender;

() load_data() impure {
    slice ds = get_data().begin_parse();
    data::admin = ds~load_msg_addr();
    data::goal = ds~load_coins();
    data::current = ds~load_dict();
    data::block_time = ds~load_uint(64);
    data::priority_coin = ds~load_msg_addr();
    data::metadata_ipfs_link = ds~load_ref();
    data::fee_receiver = ds~load_msg_addr();
    data::fee_percentage = ds~load_uint(16);
    data::helper_code = ds~load_ref();
}

() save_data() impure {
    set_data(begin_cell()
        .store_slice(data::admin)
        .store_coins(data::goal)
        .store_dict(data::current)
        .store_uint(data::block_time, 64)
        .store_slice(data::priority_coin)
        .store_ref(data::metadata_ipfs_link)
        .store_slice(data::fee_receiver)
        .store_uint(data::fee_percentage, 16)
        .store_ref(data::helper_code)
    .end_cell());
}

(slice, int) dict_get?(cell dict, int key_len, slice index) asm(index dict key_len) "DICTGET" "NULLSWAPIFNOT";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_bits() < 96) {
        return ();
    }

    context::op = in_msg_body~load_uint(32);
    context::query_id = in_msg_body~load_uint(64);
    (_, context::sender) = in_msg_full.begin_parse().load_msg_addr();

    load_data();

    if (context::op == op::claim) {
        throw_unless(error::wrong_sender, equal_slices(context::sender, data::admin));
        throw_unless(error::not_finished, now() > data::block_time);
        (slice priority_balance, int f?) = data::current.dict_get?(267, data::priority_coin);
        throw_unless(error::blocked, f? & (priority_balance~load_coins() >= data::goal));
        
        (slice key, slice val, int flag) = data::current~dict::delete_get_min(267);
        while (flag) {
            int amount = val~load_coins();
            int fee_amount = amount * data::fee_percentage / 10000;
            
            send_raw_message(begin_cell()
                .store_uint(0x18, 6)
                .store_slice(key)
                .store_coins(const::jetton_transfer_fee)
                .store_uint(0, 107)
                .store_uint(op::transfer, 32)
                .store_uint(context::query_id, 64)
                .store_coins(amount - fee_amount)
                .store_slice(data::admin)
                .store_uint(0, 6)
            .end_cell(), 1);

            send_raw_message(begin_cell()
                .store_uint(0x18, 6)
                .store_slice(key)
                .store_coins(const::jetton_transfer_fee)
                .store_uint(0, 107)
                .store_uint(op::transfer, 32)
                .store_uint(context::query_id, 64)
                .store_coins(fee_amount)
                .store_slice(data::fee_receiver)
                .store_uint(0, 6)
            .end_cell(), 1);

            (key, val, flag) = data::current~dict::delete_get_min(267);
        }
    }

    elseif (context::op == op::return_request) {
        throw_unless(error::not_finished, now() > data::block_time);
        (slice priority_balance, int f?) = data::current.dict_get?(267, data::priority_coin);
        throw_if(error::not_blocked, f? & (priority_balance~load_coins() >= data::goal));

        slice user = in_msg_body~load_msg_addr();
        cell tokens = in_msg_body~load_dict();

        cell helper_stateinit = begin_cell()
            .store_uint(0, 2)
            .store_dict(data::helper_code)
            .store_dict(begin_cell()
                .store_slice(my_address())
                .store_slice(user)
                .store_uint(0, 1)
            .end_cell())
            .store_uint(0, 1)
        .end_cell();

        slice helper_address = begin_cell()
            .store_uint(4, 3)
            .store_int(0, 8)
            .store_uint(cell_hash(helper_stateinit), 256)
        .end_cell().begin_parse();

        throw_unless(error::wrong_sender, equal_slices(context::sender, data::helper_code));

        (slice key, slice val, int flag) = tokens~dict::delete_get_min(267);
        while (flag) {
            int amount = val~load_coins();
            
            send_raw_message(begin_cell()
                .store_uint(0x18, 6)
                .store_slice(key)
                .store_coins(const::jetton_transfer_fee)
                .store_uint(0, 107)
                .store_uint(op::transfer, 32)
                .store_uint(context::query_id, 64)
                .store_coins(amount)
                .store_slice(user)
                .store_uint(0, 6)
            .end_cell(), 1);

            (key, val, flag) = tokens~dict::delete_get_min(267);
        }
    }

    elseif (context::op == op::transfer_notification) {
        int amount = in_msg_body~load_coins();
        slice sender = in_msg_body~load_msg_addr();
        
        (slice current_amount_slice, int f?) = data::current.dict_get?(267, context::sender);
        int current_amount = amount;
        if (f?) {
            current_amount += current_amount_slice~load_coins();
        }
        
        data::current~dict_set(267, context::sender, begin_cell().store_coins(current_amount).end_cell().begin_parse());

        cell helper_stateinit = begin_cell()
            .store_uint(0, 2)
            .store_dict(data::helper_code)
            .store_dict(begin_cell()
                .store_slice(my_address())
                .store_slice(sender)
                .store_uint(0, 1)
            .end_cell())
            .store_uint(0, 1)
        .end_cell();

        slice helper_address = begin_cell()
            .store_uint(4, 3)
            .store_int(0, 8)
            .store_uint(cell_hash(helper_stateinit), 256)
        .end_cell().begin_parse();

        send_raw_message(begin_cell()
            .store_uint(0x18, 6)
            .store_slice(helper_address)
            .store_coins(0)
            .store_uint(6, 108)
            .store_ref(helper_stateinit)
            .store_uint(op::confirm_donate, 32)
            .store_uint(context::query_id, 64)
            .store_slice(context::sender)
            .store_coins(amount)
        .end_cell(), 64);
    }

    else {
        throw(0xffff);
    }

    save_data();
}
