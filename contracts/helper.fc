#include "imports/stdlib.fc";
#include "constants.fc";

global slice data::fundraiser;
global slice data::user;
global cell data::current;

global int context::op;
global int context::query_id;
global slice context::sender;

() load_data() impure {
    slice ds = get_data().begin_parse();
    data::fundraiser = ds~load_msg_addr();
    data::user = ds~load_msg_addr();
    data::current = ds~load_dict();
}

() save_data() impure {
    set_data(begin_cell()
        .store_slice(data::fundraiser)
        .store_slice(data::user)
        .store_dict(data::current)
    .end_cell());
}

(slice, int) dict_get?(cell dict, int key_len, slice index) asm(index dict key_len) "DICTGET" "NULLSWAPIFNOT";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_bits() < 96) {
        return ();
    }

    context::op = in_msg_body~load_uint(32);
    context::query_id = in_msg_body~load_uint(64);
    (_, context::sender) = in_msg_full.begin_parse().skip_bits(4).load_msg_addr();

    load_data();

    if (context::op == op::confirm_donate) {
        throw_unless(error::wrong_sender, equal_slices(context::sender, data::fundraiser));

        slice token = in_msg_body~load_msg_addr();
        int amount = in_msg_body~load_coins();

        (slice current_amount_slice, int f?) = data::current.dict_get?(267, token);
        int current_amount = amount;
        if (f?) {
            current_amount += current_amount_slice~load_coins();
        }
        
        data::current~dict_set(267, token, begin_cell().store_coins(current_amount).end_cell().begin_parse());
    }

    elseif (context::op == op::return) {
        throw_unless(error::wrong_sender, equal_slices(context::sender, data::user));

        send_raw_message(begin_cell()
            .store_uint(0x18, 6)
            .store_slice(data::fundraiser)
            .store_coins(0)
            .store_uint(0, 107)
            .store_uint(op::return_request, 32)
            .store_uint(context::query_id, 64)
            .store_slice(data::user)
            .store_dict(data::current)
        .end_cell(), 128);
    }

    else {
        throw(0xffff);
    }

    save_data();
}
